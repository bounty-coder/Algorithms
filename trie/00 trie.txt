Trie is an efficient information reTrieval data structure.
If we store keys in binary search tree, a well balanced BST will need time proportional 
to O(M*log N), where M is maximum string length and N is number of keys in tree. 
Using Trie, we can search the key in O(M) time.

Algorithm	Average	Worst case
Space		O(n)	O(n)
Search		O(n)	O(n)
Insert		O(n)	O(n)
Delete		O(n)	O(n)

memory requirement- O(alphabet_size*k*N)  
#alphabet_size=26; k=avg key len; N- no of keys

every character of input key is inserted as an individual trie node.
the children is an array of pointers to next level trie nodes.
Key refers to the word that you are inserting or searching in trie.

SEARCHING
1. While searching we only compare the characters and move down.
2. Search will be teriminate due to end of character
If the value field of last node is non-zero then the key exist in trie.
3. The search can also terminate due to lack of key nodes in the 
    trie without examining all the character.