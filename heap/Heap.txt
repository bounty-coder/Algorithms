A Heap is a special Tree-based data structure in which the tree is a complete binary tree(except the last level, it may be or may not be)
two types: Max-Heap & Min-Heap

A binary heap is typically represented as an array.
The root element will be at Arr[0].
Arr[(i-1)/2]	Returns the parent node
Arr[(2*i)+1]	Returns the left child node
Arr[(2*i)+2]	Returns the right child node

Insertion:
1) Insert at the last available position
2) a) Min-Heap
Compare data we just inserted to parents data. If its less than the parents,
we swap. Continue to do this until we reach the root node
 b) Max-Heap
Compare data we just inserted to parents data. If it's greater than the parents,
 we swap. Continue to do this until we reach the root node

Deletion:
1) Replace the root or element to be deleted by the last element.
2) Delete the last element from the Heap.
3) Since, the last element is now placed at the position of the root node. 
So, it may not follow the heap property. Therefore, heapify the last node placed at the position of root.

Max number of elements at height h: 2^h
Max elements in the entire tree:    (2^(h+1)) - 1
height of tree = (log n)base 2

Implementation in python:

import heapq   //importing heapq
heapq.heapify(arr)    //defaultly min Heap
heapq._heapify_max(arr)    //for max Heap 

Trick: Also if we want heap max, we can negate every number and heapmin push

heapq.heappush(arr,10)    //adding element
heapq.heappop(arr)        //poping from head





Implementation in CPP:

using STL priority queue
#include <queue>

priority_queue<int, vector<int> > maxHeap;        //defaultly it is max heap

priority_queue<int, vector<int>, greater<int> > minHeap;        //will have to write a comparator
